apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-{{ .Release.Name }}
  labels:
    release: {{ .Release.Name }}
{{- include "namespace" . | indent 2 }}
data:
  configOverride.properties: |-
    iserver.default.hostname=iserver-{{ .Release.Name }}
    iserver.default.port={{ .Values.iserver.service.port }}
    iserver.tlsEnabled=false
    services.collaboration.enabled=false
    services.collaboration.tlsEnabled=false
    auth.modes.available=1,16
    iserver.requestTimeout = 120000
    identityToken.secretKey=tDiLgBAWoqERnkCLngcG
    auth.cors.origins=
    security.allowAllOrigins=true
    security.allowedOrigins=
    iserver.maxPoolSize = 100
    session.searchWorkingSet = 3
    iserver.initialPoolSize = 10
    feature.storage-service.read-db-config-from-env-variable.enabled=false

  odbc.ini: |-
    [ODBC Data Sources]
    poc_metadata=MicroStrategy ODBC Driver for PostgreSQL Wire Protocol

    [ODBC]
    Trace=0
    TraceFile=odbctrace.out
    TraceDll=/opt/mstr/MicroStrategy/drivers/odbc/progress/lib/MYtrc64.so
    InstallDir=/opt/mstr/MicroStrategy/drivers/odbc/progress/
    IANAAppCodePage=106
    UseCursorLib=0
    UNICODE=UTF-8

    [poc_metadata]
    ApplicationUsingThreads=1
    DriverUnicodeType=1
    Description=MicroStrategy ODBC Driver for PostgreSQL Wire Protocol
    PORT=5432
    DATABASE=poc_metadata
    CHARSET=utf8
    SERVER=postgres-md-{{ .Release.Name }}
    OPTION=2
    SOCKET=#
    Driver=/opt/mstr/MicroStrategy/drivers/odbc/postgresql/MYpsql64.so

  config.ini: |-
    [Server]
    Server=1
    Action=4
    InstanceName=CICD
    ProjectsToRegister=Consolidated Education Project\Hierarchies Project\Human Resources Analysis Module\MicroStrategy Tutorial\Relationships Project\Star\
    ProjectsToUnregister=
    DSName={{ .Values.iserver.odbc.dsn_md }}
    DSNUser=postgres
    DSNPwd=mstr1234
    MDPrefix=
    DSSUser=Administrator
    DSSPwd=
    Port=34952
    EncryptPassword=0
    RegisterAsService=0
    StartServerAfterConfig=1
    ConfigureSSL=0
    SSLPort=
    CertificatePath=
    KeyPath=
    KeyPassword=
    DefaultStatisticsRep=0
    DefaultDSNNameDefaultStatistics=
    UserNameDefaultStatistics=
    UserPwdDefaultStatistics=
    EncryptUserPwdDefaultStatistics=
    DefaultStatisticsPrefix=
    kafkaHost(s)=
    ConfigMessagingService=0
    KeepStatisticsSettings=1
    RESTPort=34962

  postgres_entrypoint.sh: |-
    #!/usr/bin/env bash
    set -Eeo pipefail
    # TODO swap to -Eeuo pipefail above (after handling all potentially-unset variables)

    # usage: file_env VAR [DEFAULT]
    #    ie: file_env 'XYZ_DB_PASSWORD' 'example'
    # (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
    #  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
    file_env() {
        local var="$1"
        local fileVar="${var}_FILE"
        local def="${2:-}"
        if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
            echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
            exit 1
        fi
        local val="$def"
        if [ "${!var:-}" ]; then
            val="${!var}"
        elif [ "${!fileVar:-}" ]; then
            val="$(< "${!fileVar}")"
        fi
        export "$var"="$val"
        unset "$fileVar"
    }

    # check to see if this file is being run or sourced from another script
    _is_sourced() {
        # https://unix.stackexchange.com/a/215279
        [ "${#FUNCNAME[@]}" -ge 2 ] \
            && [ "${FUNCNAME[0]}" = '_is_sourced' ] \
            && [ "${FUNCNAME[1]}" = 'source' ]
    }

    # used to create initial postgres directories and if run as root, ensure ownership to the "postgres" user
    docker_create_db_directories() {
        local user; user="$(id -u)"

        mkdir -p "$PGDATA"
        chmod 700 "$PGDATA"

        # ignore failure since it will be fine when using the image provided directory; see also https://github.com/docker-library/postgres/pull/289
        mkdir -p /var/run/postgresql || :
        chmod 775 /var/run/postgresql || :

        # Create the transaction log directory before initdb is run so the directory is owned by the correct user
        if [ -n "$POSTGRES_INITDB_WALDIR" ]; then
            mkdir -p "$POSTGRES_INITDB_WALDIR"
            if [ "$user" = '0' ]; then
                find "$POSTGRES_INITDB_WALDIR" \! -user postgres -exec chown postgres '{}' +
            fi
            chmod 700 "$POSTGRES_INITDB_WALDIR"
        fi

        # allow the container to be started with `--user`
        if [ "$user" = '0' ]; then
            find "$PGDATA" \! -user postgres -exec chown postgres '{}' +
            find /var/run/postgresql \! -user postgres -exec chown postgres '{}' +
        fi
    }

    # initialize empty PGDATA directory with new database via 'initdb'
    # arguments to `initdb` can be passed via POSTGRES_INITDB_ARGS or as arguments to this function
    # `initdb` automatically creates the "postgres", "template0", and "template1" dbnames
    # this is also where the database user is created, specified by `POSTGRES_USER` env
    docker_init_database_dir() {
        # "initdb" is particular about the current user existing in "/etc/passwd", so we use "nss_wrapper" to fake that if necessary
        # see https://github.com/docker-library/postgres/pull/253, https://github.com/docker-library/postgres/issues/359, https://cwrap.org/nss_wrapper.html
        if ! getent passwd "$(id -u)" &> /dev/null && [ -e /usr/lib/libnss_wrapper.so ]; then
            export LD_PRELOAD='/usr/lib/libnss_wrapper.so'
            export NSS_WRAPPER_PASSWD="$(mktemp)"
            export NSS_WRAPPER_GROUP="$(mktemp)"
            echo "postgres:x:$(id -u):$(id -g):PostgreSQL:$PGDATA:/bin/false" > "$NSS_WRAPPER_PASSWD"
            echo "postgres:x:$(id -g):" > "$NSS_WRAPPER_GROUP"
        fi

        if [ -n "$POSTGRES_INITDB_WALDIR" ]; then
            set -- --waldir "$POSTGRES_INITDB_WALDIR" "$@"
        fi

        eval 'initdb --username="$POSTGRES_USER" --pwfile=<(echo "$POSTGRES_PASSWORD") '"$POSTGRES_INITDB_ARGS"' "$@"'

        # unset/cleanup "nss_wrapper" bits
        if [ "${LD_PRELOAD:-}" = '/usr/lib/libnss_wrapper.so' ]; then
            rm -f "$NSS_WRAPPER_PASSWD" "$NSS_WRAPPER_GROUP"
            unset LD_PRELOAD NSS_WRAPPER_PASSWD NSS_WRAPPER_GROUP
        fi
    }

    # print large warning if POSTGRES_PASSWORD is long
    # error if both POSTGRES_PASSWORD is empty and POSTGRES_HOST_AUTH_METHOD is not 'trust'
    # print large warning if POSTGRES_HOST_AUTH_METHOD is set to 'trust'
    # assumes database is not set up, ie: [ -z "$DATABASE_ALREADY_EXISTS" ]
    docker_verify_minimum_env() {
        # check password first so we can output the warning before postgres
        # messes it up
        echo "skip check"
    }

    # usage: docker_process_init_files [file [file [...]]]
    #    ie: docker_process_init_files /always-initdb.d/*
    # process initializer files, based on file extensions and permissions
    docker_process_init_files() {
        # psql here for backwards compatibility "${psql[@]}"
        psql=( docker_process_sql )

        echo
        local f
        for f; do
            case "$f" in
                *.sh)
                    # https://github.com/docker-library/postgres/issues/450#issuecomment-393167936
                    # https://github.com/docker-library/postgres/pull/452
                    if [ -x "$f" ]; then
                        echo "$0: running $f"
                        "$f"
                    else
                        echo "$0: sourcing $f"
                        . "$f"
                    fi
                    ;;
                *.sql)    echo "$0: running $f"; docker_process_sql -f "$f"; echo ;;
                *.sql.gz) echo "$0: running $f"; gunzip -c "$f" | docker_process_sql; echo ;;
                *.sql.xz) echo "$0: running $f"; xzcat "$f" | docker_process_sql; echo ;;
                *)        echo "$0: ignoring $f" ;;
            esac
            echo
        done
    }

    # Execute sql script, passed via stdin (or -f flag of pqsl)
    # usage: docker_process_sql [psql-cli-args]
    #    ie: docker_process_sql --dbname=mydb <<<'INSERT ...'
    #    ie: docker_process_sql -f my-file.sql
    #    ie: docker_process_sql <my-file.sql
    docker_process_sql() {
        local query_runner=( psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --no-password )
        if [ -n "$POSTGRES_DB" ]; then
            query_runner+=( --dbname "$POSTGRES_DB" )
        fi

        "${query_runner[@]}" "$@"
    }

    # create initial database
    # uses environment variables for input: POSTGRES_DB
    docker_setup_db() {
    echo "running docker_setup_db"
    if [ "$POSTGRES_DB" != 'postgres' ]; then
    echo "running docker_setup_db for $POSTGRES_DB"
    POSTGRES_DB= docker_process_sql --dbname postgres --set db="$POSTGRES_DB" <<-'EOSQL'
    CREATE DATABASE :"db" ;
    EOSQL
    echo
    fi
    }

    # Loads various settings that are used elsewhere in the script
    # This should be called before any other functions
    docker_setup_env() {
        file_env 'POSTGRES_PASSWORD'

        file_env 'POSTGRES_USER' 'postgres'
        file_env 'POSTGRES_DB' "$POSTGRES_USER"
        file_env 'POSTGRES_INITDB_ARGS'
        # default authentication method is md5
        : "${POSTGRES_HOST_AUTH_METHOD:=md5}"

        declare -g DATABASE_ALREADY_EXISTS
        # look specifically for PG_VERSION, as it is expected in the DB dir
        if [ -s "$PGDATA/PG_VERSION" ]; then
            DATABASE_ALREADY_EXISTS='true'
        fi
    }

    # append POSTGRES_HOST_AUTH_METHOD to pg_hba.conf for "host" connections
    pg_setup_hba_conf() {
        {
            echo
            if [ 'trust' = "$POSTGRES_HOST_AUTH_METHOD" ]; then
                echo '# warning trust is enabled for all connections'
                echo '# see https://www.postgresql.org/docs/12/auth-trust.html'
            fi
            echo "host all all all $POSTGRES_HOST_AUTH_METHOD"
        } >> "$PGDATA/pg_hba.conf"
    }

    # start socket-only postgresql server for setting up or running scripts
    # all arguments will be passed along as arguments to `postgres` (via pg_ctl)
    docker_temp_server_start() {
        if [ "$1" = 'postgres' ]; then
            shift
        fi

        # internal start of server in order to allow setup using psql client
        # does not listen on external TCP/IP and waits until start finishes
        set -- "$@" -c listen_addresses='' -p "${PGPORT:-5432}"

        PGUSER="${PGUSER:-$POSTGRES_USER}" \
        pg_ctl -D "$PGDATA" \
            -o "$(printf '%q ' "$@")" \
            -w start
    }

    # stop postgresql server after done setting up user and running scripts
    docker_temp_server_stop() {
        PGUSER="${PGUSER:-postgres}" \
        pg_ctl -D "$PGDATA" -m fast -w stop
    }

    # check arguments for an option that would cause postgres to stop
    # return true if there is one
    _pg_want_help() {
        local arg
        for arg; do
            case "$arg" in
                # postgres --help | grep 'then exit'
                # leaving out -C on purpose since it always fails and is unhelpful:
                # postgres: could not access the server configuration file "/var/lib/postgresql/data/postgresql.conf": No such file or directory
                -'?'|--help|--describe-config|-V|--version)
                    return 0
                    ;;
            esac
        done
        return 1
    }

    _main() {
        # if first arg looks like a flag, assume we want to run postgres server
        echo "start running postgres_entrypoint.sh..."
        
        if [ "${1:0:1}" = '-' ]; then
            set -- postgres "$@"
        fi

        if [ "$1" = 'postgres' ] && ! _pg_want_help "$@"; then
            docker_setup_env
            # setup data directories and permissions (when run as root)
            docker_create_db_directories
            if [ "$(id -u)" = '0' ]; then
                # then restart script as postgres user
                exec gosu postgres "$BASH_SOURCE" "$@"
            fi
            
            #rm -rf /var/lib/postgresql/data/postmaster.pid
            # only run initialization on an empty data directory
            if [ -z "$DATABASE_ALREADY_EXISTS" ]; then
                echo "start running initialization..."
                docker_verify_minimum_env

                # check dir permissions to reduce likelihood of half-initialized database
                ls /docker-entrypoint-initdb.d/ > /dev/null

                docker_init_database_dir
                pg_setup_hba_conf

                # PGPASSWORD is required for psql when authentication is required for 'local' connections via pg_hba.conf and is otherwise harmless
                # e.g. when '--auth=md5' or '--auth-local=md5' is used in POSTGRES_INITDB_ARGS
                export PGPASSWORD="${PGPASSWORD:-$POSTGRES_PASSWORD}"
                docker_temp_server_start "$@"

                docker_setup_db
                docker_process_init_files /docker-entrypoint-initdb.d/*

                docker_temp_server_stop
                unset PGPASSWORD

                echo
                echo 'PostgreSQL init process complete; ready for start up.'
                echo
            else
                echo
                echo 'PostgreSQL Database directory appears to contain a database; Skipping initialization'
                echo
            fi
        fi

        exec "$@"
    }

    if ! _is_sourced; then
        if [ `whoami` = "root" ];then
            echo "root user!"
            bash /mnt/scripts/postgres_startup.sh
        else
            echo "non-root user!"
        fi
        _main "$@"
    fi


  postgres_startup.sh: |-
    #! /bin/bash
    echo "update package"
    apt update
    echo "install wget"
    apt -y install wget
    echo "install unzip"
    apt -y install unzip
    echo "install curl"
    apt -y install curl


    if [[ -z "$DATABASE_URL" ]]; then
        echo "Database is not provided by User ..."
    else
        echo "Downloading database backup file from $DATABASE_URL ..."
        wget -O db.zip $DATABASE_URL

        echo "Unzip the downloaded db package"
        unzip db.zip

        echo "Move database backup files to docker-entrypoint-initdb.d folder"
        mv -f *.sql /docker-entrypoint-initdb.d/
        chmod -R 777 docker-entrypoint-initdb.d
        
        # echo "import DB to database $POSTGRES_DB "
        # export PGPASSWORD=mstr123&& psql -Upostgres -p5432 -d $POSTGRES_DB -f *.sql

        echo "Clean environment by removing the downloaded zip file"
        rm db.zip
    fi

  init_iserver.sh: |-
    #! /bin/bash
    echo "install wget"
    yum -y install wget
    echo "install unzip"
    yum -y install unzip
    # echo "install java"
    # yum -y install java
    echo "install epel-release"
    yum -y install epel-release
    echo "install p7zip"
    yum -y install p7zip
    yum clean all

    # download cube cache
    echo ${SERVER_DEF}
    if [ -z $CUBE_URL ]; then
        echo "CUBE_URL is empty string"
    else
        echo ${CUBE_URL}
        IFS=, read -ra arr <<< "$CUBE_URL"; declare -p arr;
        for element in "${arr[@]}"
        do
        echo "========"
        echo ${element}
        echo "========"
        cube_project_id=`echo ${element} | sed -r "s/.+\/(.+)\..+/\1/"`
        echo "CUBE_PROJECT_ID: $cube_project_id"
        #mkdir -p /opt/mstr/MicroStrategy/install/Cubes/Test/${cube_project_id}
        #7za x -o/opt/mstr/MicroStrategy/install/Cubes/Test/${cube_project_id} $element
        host_name=`hostname`
        cube_dir=/opt/mstr/MicroStrategy/IntelligenceServer/Cube/${SERVER_DEF}/Server_${host_name}_${cube_project_id}
        mkdir -p $cube_dir
        7za x -o${cube_dir} $element
        #cube_dir=/opt/mstr/MicroStrategy/IntelligenceServer/Cube/${SERVER_DEF}/Server_${host_name}_${cube_project_id}
        #echo $cube_dir
        #mkdir -p ${cube_dir}
        #cp -avr /opt/mstr/MicroStrategy/install/Cubes/Test/${cube_project_id}/* ${cube_dir}
        done
    fi

    # Configure MSIReg.reg with new test MD 
    sed -i "s/DSN=poc_metadata/DSN=$DSN_MD/g" /opt/mstr/MicroStrategy/MSIReg.reg
    echo "replace MSIReg MD dsn to $DSN_MD"

    #config Engine CSI log for IServer
    DEST_CONFIG='<?xml version="1.0"?><configuration><log_destinations><log_destination callstack_message_ids="" n="Engine_CSI"  max_size="5120" tp="3"/></log_destinations></configuration>'
    echo $DEST_CONFIG
    cd /opt/mstr/MicroStrategy/bin
    echo $DEST_CONFIG | ./mstrctl -s IntelligenceServer ssc
    echo "Configure CSI log destination done"

    TRACE_CONFIG='<?xml version="1.0"?><configuration><diagnostics pru="0"><logger n="Engine"><dispatcher n="CSI"><log_destination n="Engine_CSI"/></dispatcher></logger></diagnostics></configuration>'
    echo $TRACE_CONFIG
    cd /opt/mstr/MicroStrategy/bin
    echo $TRACE_CONFIG | ./mstrctl -s IntelligenceServer ssic
    echo $TRACE_CONFIG | ./mstrctl -s IntelligenceServer ssc
    echo "Configure CSI log trace done"

    CONFIG='<configuration><metadata><login pwd="'mstr1234'">'$DB_USER'</login><odbc dsn="'$DSN_MD'"/></metadata><svrd n="'$SERVER_DEF'"/><tcp_port_number>34952</tcp_port_number></configuration>'
    echo $CONFIG
    cd /opt/mstr/MicroStrategy/bin
    echo $CONFIG | ./mstrctl -s IntelligenceServer ssic
    echo "Configure instance done"
    
    bash /mnt/scripts/fix_encoding.sh
    echo "fix encoding for odbc character"

    # Configure I-Server
    if [[ $IS_CONFIG_OPT == "registry" ]]; then
        echo "I-Server Configuration is provided from Registry File, start import the MSIReg file ..."
        if [ -f /etc/mstr/iserver/MSIReg.reg ]; then
        cp -f /etc/mstr/iserver/MSIReg.reg /opt/mstr/MicroStrategy/MSIReg.reg
        if [[ "$CLUSTER_ISERVER" ]]; then
            ISERVER_NODE=${HOSTNAME##*-}
            if [ "$ISERVER_NODE" -gt "0" ]; then
            clustermembers="\\\"ClusterMembers\\\"=\\\""
            i=0
            while [ "$i" -lt "$ISERVER_NODE" ]
            do
                clustermembers="${clustermembers}iserver-$i;"
                i=`expr $i + 1`
            done
            clustermembers="${clustermembers}\\\""
            original="\\\"ClusterMembers\\\"=\\\"\\\""
            sed -i "s/$original/$clustermembers/" /opt/mstr/MicroStrategy/MSIReg.reg
            fi
        fi
        else
        echo "There is no /etc/mstr/iserver/MSIReg.reg file provided, use the default MSIReg.reg file!"
        fi
    elif [[ $IS_CONFIG_OPT == "ini" ]]; then
        echo "I-Server Configuration is provided from configure wizard ini File, start import the ini file ..."
        if [ -f /opt/mstr/MicroStrategy/config.ini ]; then
        #cp -f /etc/mstr/iserver/config.ini /opt/mstr/MicroStrategy/config.ini
        /opt/mstr/MicroStrategy/bin/mstrcfgwiz-editor -response /opt/mstr/MicroStrategy/config.ini
        else
        echo "There is no /etc/mstr/iserver/config.ini provided, use default config.ini file!"
        fi
    else
        echo "I-Server Configuration Option IS_CONFIG_OPT is not selected, please follow the steps to configure I-Server..."
        /opt/mstr/MicroStrategy/bin/mstrsvr-configure
    fi

    if [[ "$NEE_HOST" != "nee" ]]; then
        echo "The NEE_HOST is configured to: $NEE_HOST"
        #original="\"host\"=\"nee\""
        #new="\"host\"=\"$NEE_HOST\""
        original="\\\"host\\\"=\\\"nee\\\""
        new="\\\"host\\\"=\\\"$NEE_HOST\\\""
        sed -i "s/$original/$new/" /opt/mstr/MicroStrategy/MSIReg.reg
    fi

    # Start I-Server Service
    echo "Starting I-Server ..."
    # make sure to kill iserver process if the iserver is started by configure wizard - it's possible that user provides the config.ini file with iserver starting right after configuratio
    ps -auxf | grep -v 'grep' | grep 'MSTRSvr'
    iserver_running=$?
    if [[ $iserver_running == 0 ]]; then
        echo "I-Server process is launched by configurewizard. Shutting down it before starting I-Server from consol..."
        pkill -x /opt/mstr/MicroStrategy/install/IntelligenceServer/bin/MSTRSvr
        while [[ $iserver_running == 0 ]]; do
        sleep 5
        ps -auxf | grep -v 'grep' | grep 'MSTRSvr'
        iserver_running=$?
        done
    fi

    /opt/mstr/MicroStrategy/bin/mstrsvr

  fix_encoding.sh: |-
    ORIGINENCODING=dword:00000000
    REPLACEENCODING=dword:00000001

    if [ "$DB_TYPE" == "mysql" ]; then
    ORIGINENCODING=dword:00000001
    REPLACEENCODING=dword:00000000
    fi
    echo $REPLACEENCODING
    if grep -q "ODBCCharacterSetEncoding" /opt/mstr/MicroStrategy/MSIReg.reg
    then
        sed -n 's/"ODBCCharacterSetEncoding"='$ORIGINENCODING'/"ODBCCharacterSetEncoding"='$REPLACEENCODING'/p'  /opt/mstr/MicroStrategy/MSIReg.reg
        sed -i 's/"ODBCCharacterSetEncoding"='$ORIGINENCODING'/"ODBCCharacterSetEncoding"='$REPLACEENCODING'/g'  /opt/mstr/MicroStrategy/MSIReg.reg
    else
        sed -i 's/\r$//'  /opt/mstr/MicroStrategy/MSIReg.reg
        sed -i '/.*Data Sources\\CastorServer]/a "ODBCCharacterSetEncoding"='$REPLACEENCODING'/g'  /opt/mstr/MicroStrategy/MSIReg.reg
    fi
